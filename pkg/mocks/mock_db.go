// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\puja.priyanshu\Desktop\Practise\.vscode\Go_Practise\csv-microservice\pkg\db\db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "csv-microservice/pkg/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ConnectDatabase mocks base method.
func (m *MockDatabase) ConnectDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectDatabase indicates an expected call of ConnectDatabase.
func (mr *MockDatabaseMockRecorder) ConnectDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDatabase", reflect.TypeOf((*MockDatabase)(nil).ConnectDatabase))
}

// GetPaginatedRecords mocks base method.
func (m *MockDatabase) GetPaginatedRecords(page, limit int) ([]db.Records, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedRecords", page, limit)
	ret0, _ := ret[0].([]db.Records)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedRecords indicates an expected call of GetPaginatedRecords.
func (mr *MockDatabaseMockRecorder) GetPaginatedRecords(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedRecords", reflect.TypeOf((*MockDatabase)(nil).GetPaginatedRecords), page, limit)
}

// InsertBatch mocks base method.
func (m *MockDatabase) InsertBatch(records [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBatch", records)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBatch indicates an expected call of InsertBatch.
func (mr *MockDatabaseMockRecorder) InsertBatch(records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatch", reflect.TypeOf((*MockDatabase)(nil).InsertBatch), records)
}
